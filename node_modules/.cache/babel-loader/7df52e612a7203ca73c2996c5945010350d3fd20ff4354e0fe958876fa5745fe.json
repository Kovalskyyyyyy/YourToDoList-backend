{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lukas\\\\OneDrive\\\\Plocha\\\\YourToDoList\\\\yourtodolist\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isTileView, setIsTileView] = useState(false); // Control tile view display\n\n  const toggleTileView = () => {\n    setIsTileView(!isTileView);\n  };\n  const selectList = listId => {\n    setSelectedListId(listId);\n    setIsTileView(false); // Close tile view after selecting a list\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      username: username,\n      onLogoClick: toggleTileView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), isTileView && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tile-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"All Lists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tile-container\",\n        children: lists.map(list => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tile\",\n          onClick: () => selectList(list.id),\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: list.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [list.todos.length, \" items\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [list.members.length, \" members\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 33\n          }, this)]\n        }, list.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }, this), !selectedListId && !isTileView ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-list-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter new list name\",\n        value: newListName,\n        onChange: e => setNewListName(e.target.value),\n        className: \"new-list-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewList,\n        className: \"add-list-btn\",\n        children: \"Add List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this) : selectedListId && !isTileView ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-container\",\n        children: [/*#__PURE__*/_jsxDEV(TodoList, {\n          list: filteredList,\n          onToggleEdit: () => toggleEditMode(filteredList.id),\n          onNameChange: newName => handleNameChange(filteredList.id, newName),\n          todos: filteredList.todos,\n          setTodos: newTodos => updateTodos(filteredList.id, newTodos)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MemberList, {\n          members: filteredList.members,\n          setMembers: newMembers => updateMembers(filteredList.id, newMembers)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)]\n      }, filteredList.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"bRpVquB1CSuO8WkvgTCDRkVgcQY=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","_s","isTileView","setIsTileView","useState","toggleTileView","selectList","listId","setSelectedListId","_jsxDEV","className","children","Header","username","onLogoClick","fileName","_jsxFileName","lineNumber","columnNumber","lists","map","list","onClick","id","name","todos","length","members","selectedListId","type","placeholder","value","newListName","onChange","e","setNewListName","target","addNewList","TodoList","filteredList","onToggleEdit","toggleEditMode","onNameChange","newName","handleNameChange","setTodos","newTodos","updateTodos","MemberList","setMembers","newMembers","updateMembers","_c","$RefreshReg$"],"sources":["C:/Users/lukas/OneDrive/Plocha/YourToDoList/yourtodolist/src/App.js"],"sourcesContent":["function App() {\n    const [isTileView, setIsTileView] = useState(false); // Control tile view display\n\n    const toggleTileView = () => {\n        setIsTileView(!isTileView);\n    };\n\n    const selectList = (listId) => {\n        setSelectedListId(listId);\n        setIsTileView(false); // Close tile view after selecting a list\n    };\n\n    return (\n        <div className=\"app\">\n            <Header username={username} onLogoClick={toggleTileView} />\n            {isTileView && (\n                <div className=\"tile-view\">\n                    <h2>All Lists</h2>\n                    <div className=\"tile-container\">\n                        {lists.map((list) => (\n                            <div\n                                key={list.id}\n                                className=\"tile\"\n                                onClick={() => selectList(list.id)}\n                            >\n                                <h3>{list.name}</h3>\n                                <p>{list.todos.length} items</p>\n                                <p>{list.members.length} members</p>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            )}\n            {!selectedListId && !isTileView ? (\n                <div className=\"add-list-section\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Enter new list name\"\n                        value={newListName}\n                        onChange={(e) => setNewListName(e.target.value)}\n                        className=\"new-list-input\"\n                    />\n                    <button onClick={addNewList} className=\"add-list-btn\">Add List</button>\n                </div>\n            ) : selectedListId && !isTileView ? (\n                <div className=\"content\">\n                    <div key={filteredList.id} className=\"list-container\">\n                        <TodoList\n                            list={filteredList}\n                            onToggleEdit={() => toggleEditMode(filteredList.id)}\n                            onNameChange={(newName) => handleNameChange(filteredList.id, newName)}\n                            todos={filteredList.todos}\n                            setTodos={(newTodos) => updateTodos(filteredList.id, newTodos)}\n                        />\n                        <MemberList\n                            members={filteredList.members}\n                            setMembers={(newMembers) => updateMembers(filteredList.id, newMembers)}\n                        />\n                    </div>\n                </div>\n            ) : null}\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}